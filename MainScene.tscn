[gd_scene load_steps=45 format=2]

[ext_resource path="res://Assets/Tiles/Season_collection.png" type="Texture" id=1]
[ext_resource path="res://Assets/Player.png" type="Texture" id=2]
[ext_resource path="res://Assets/pixel.png" type="Texture" id=3]
[ext_resource path="res://Assets/circle.png" type="Texture" id=4]
[ext_resource path="res://Assets/circumplex.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D texHistory;
uniform sampler2D texHSL;
uniform float targetArousal;
uniform float targetValence;
uniform float targetGreenValue = 0.05;

float fMod(float value, float m) {
	float temp = value / m;
	return (temp - floor(temp)) * m; 
}

vec3 RGB2HSL(vec3 RGB) {
	vec3 HSL = vec3(0, 0, 0);
	
	float cMax = max(max(RGB.r, RGB.g), RGB.b);
	float cMin = min(min(RGB.r, RGB.g), RGB.b);
	float delta = cMax - cMin;
	
	HSL.b = (cMax +cMin) / 2.0;
	
	if(delta == 0.0) {
		HSL.r = 0.0;
		HSL.g = 0.0;
	} else {
		HSL.g = delta / (1.0 - abs(2.0 * HSL.b - 1.0));
		if(cMax == RGB.r) {
			HSL.r = 60.0 * mod((RGB.g - RGB.b) / delta, 6.0);
		} else if(cMax == RGB.g) {
			HSL.r = 60.0 * ((RGB.b - RGB.r) / delta + 2.0);
		} else if(cMax == RGB.b) {
			HSL.r = 60.0 * ((RGB.r - RGB.g) / delta + 4.0);
		}
		HSL.r = fMod(HSL.r, 360.0);
		HSL.r /= 360.0;
	}
	
	return HSL;
}

vec3 HSL2RGB(vec3 HSL) {
	vec3 RGB = vec3(0, 0, 0);
	HSL.r *= 360.0;
	float c = (1.0 - abs(2.0 * HSL.b - 1.0)) * HSL.g;
	float x = c * (1.0 - abs(fMod(HSL.r / 60.0, 2.0) - 1.0));
	float m = HSL.b - c / 2.0;
	
	if(0.0 <= HSL.r && HSL.r < 60.0) {
		RGB = vec3(c, x, 0);
	} else if(60.0 <= HSL.r && HSL.r < 120.0) {
		RGB = vec3(x, c, 0);
	} else if(120.0 <= HSL.r && HSL.r < 180.0) {
		RGB = vec3(0, c, x);
	} else if(180.0 <= HSL.r && HSL.r < 240.0) {
		RGB = vec3(0, x, c);
	} else if(240.0 <= HSL.r && HSL.r < 300.0) {
		RGB = vec3(x, 0, c);
	} else if(300.0 <= HSL.r && HSL.r < 360.0) {
		RGB = vec3(c, 0, x);
	}
	
	RGB.xyz += m;
	
	return RGB;
}

vec2 calculateAV(float hueB, float hueG, float meanSaturation) {
	return vec2(4.762 + 2.914 * hueB - 1.707 * meanSaturation,
				3.109 + 8.476 * hueG + 3.548 * meanSaturation);
}

vec3 calculateGBS(float greenValue) {
	vec3 result = vec3(greenValue, 0.0, 0.0);
	
	result.b = 0.28184 * targetValence - 2.38895 * greenValue - 0.87626; // Saturation
	result.g = 0.34317 * targetArousal + 0.58579 * result.b - 1.63417; // BlueValue
	
	return result;
}

void fragment() {
	vec4 color = texture(texHSL, UV);
	vec4 hueRGBY = texture(texHistory, vec2(1.0/3.0, 0));
	vec4 hueMC_meanSL = texture(texHistory, vec2(2.0/3.0, 0));
	//float hueR = hueRGBY.r;
	//float hueG = hueRGBY.g;
	//float hueB = hueRGBY.b;
	//float hueY = hueRGBY.a;
	//float hueM = hueMC_meanSL.r;
	//float hueC = hueMC_meanSL.g;
	//float meanSaturation = hueMC_meanSL.g;
	//float meanLightness = hueMC_meanSL.b;
	
	vec3 targetGBS = calculateGBS(targetGreenValue);
	
	//float tempMaxPropotion = targetGBS.g + targetGreenValue + hueRGBY.g + hueRGBY.b;
	//float greenProportion = ((targetGreenValue + hueRGBY.g) / 2.0) / tempMaxPropotion;
	//float blueProportion = ((targetGBS.b + hueRGBY.b) / 2.0) / tempMaxPropotion;
	
	float tempMaxPropotion = targetGBS.g + targetGreenValue;
	float greenProportion = targetGreenValue / tempMaxPropotion;
	float blueProportion = targetGBS.b / tempMaxPropotion;
	
	float targetHue = (greenProportion * 120.0 + blueProportion * 240.0) / 360.0;
	
	//float targetHue = ((greenProportion + hueRGBY.g) / 2.0 * 120.0 + (blueProportion + hueRGBY.b) / 2.0 * 240.0) / 360.0;
	
	color.r = (color.r + targetHue) / 2.0;
	color.g = (color.g + targetGBS.r) / 2.0;
	//color.b += (color.b - targetGBS.b) / 2.0;
	
	//color.r = (color.r + (targetHue + hueRGBY.r) / 2.0) / 2.0;
	//color.g = (color.g + targetGBS.r) / 2.0;
	//color.b += (color.b - targetGBS.b) / 2.0;
	
	//color.r += (color.r + targetHue) / 2.0;
	//color.g = 0.5;
	//color.g += (color.g - (targetGBS.b + hueMC_meanSL.g) / 2.0) / 2.0;
	//color.b += (color.b - hueMC_meanSL.b) / 2.0;
	
	color.rgb = HSL2RGB(color.rgb);
	
	//color.g = (color.g + (targetGBS.r + hueRGBY.g) / 2.0) / 2.0;
	//color.b = (color.b + (targetGBS.g + hueRGBY.b) / 2.0) / 2.0;
	
	
	COLOR = vec4(color.rgb, 1.0);
}"

[sub_resource type="ViewportTexture" id=2]
viewport_path = NodePath("HSLTarget")

[sub_resource type="ViewportTexture" id=3]
viewport_path = NodePath("HistoryTarget")

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/targetArousal = 4.0
shader_param/targetValence = 4.0
shader_param/targetGreenValue = 0.1
shader_param/texHistory = SubResource( 3 )
shader_param/texHSL = SubResource( 2 )

[sub_resource type="ViewportTexture" id=5]
viewport_path = NodePath("DefaultTarget")

[sub_resource type="GDScript" id=6]
script/source = "extends Sprite

onready var emotionUI = get_parent().get_node(\"Panel/emotionColors\")

var MAX_PIXEM_AROUSAL = 9.383 # 9.383
var MAX_PIXEM_VALENCE = 15.133 # 15.133
var MIN_PIXEM_AROUSAL = 4.055 # 4.055
var MIN_PIXEM_VALENCE = 3.109 # 3.109

func _ready():
	emotionUI.connect(\"_on_emotion_pointer_change\", self, \"onEmotionPointerChanged\")
	pass

func onEmotionPointerChanged(emotionPointer):
	var pixemPointer = circumplexEmotionToPixemEmotion(emotionPointer);
	material.set_shader_param(\"targetValence\", pixemPointer.x)
	material.set_shader_param(\"targetArousal\", pixemPointer.y)
	material.set_shader_param(\"targetGreenValue\", emotionPointer.z)
	pass

func circumplexEmotionToPixemEmotion(circumEmotion):
	var copyEmo = Vector2()
	copyEmo.x = ((circumEmotion.x + 1.0) / 2.0) * (MAX_PIXEM_VALENCE - MIN_PIXEM_VALENCE) + MIN_PIXEM_VALENCE
	copyEmo.y = MAX_PIXEM_AROUSAL - ((circumEmotion.y + 1.0) / 2.0) * (MAX_PIXEM_AROUSAL - MIN_PIXEM_AROUSAL) + MIN_PIXEM_AROUSAL
	print(copyEmo);
	return copyEmo
"

[sub_resource type="GDScript" id=7]
script/source = "extends Sprite

onready var circle = get_node(\"circle\")
onready var lblProp = get_parent().get_node(\"lblProportion\")

var emotionPointer = Vector3(0.0, 0.0, 0.0)
var centeredEP = Vector2()

var EMOTION_CHANGE_SPEED = 1.0

signal _on_emotion_pointer_change(emotion_pointer)

func _ready():
	pass

var gotInput = false

func _process(delta):
	if Input.is_action_pressed(\"emotion_increase_positive\"):
		emotionPointer.x += EMOTION_CHANGE_SPEED * delta
		gotInput = true
	if Input.is_action_pressed(\"emotion_decrease_positive\"):
		gotInput = true
		emotionPointer.x -= EMOTION_CHANGE_SPEED * delta
		gotInput = true
	if Input.is_action_pressed(\"emotion_increase_arousal\"):
		emotionPointer.y -= EMOTION_CHANGE_SPEED * delta
		gotInput = true
	if Input.is_action_pressed(\"emotion_decrease_arousal\"):
		emotionPointer.y += EMOTION_CHANGE_SPEED * delta
		gotInput = true
	if Input.is_action_just_pressed(\"emotion_increase_proportion\"):
		emotionPointer.z += 0.01
		gotInput = true
	if Input.is_action_just_pressed(\"emotion_decrease_proportion\"):
		emotionPointer.z -= 0.01
		gotInput = true
	
	if gotInput:
		gotInput = false
		var pointer = Vector2(emotionPointer.x, emotionPointer.y)
		if pointer.length() > 1:
			pointer = pointer.normalized()
			emotionPointer.x = pointer.x
			emotionPointer.y = pointer.y
		if emotionPointer.z < 0.0 :
			emotionPointer.z = 0.0
		if emotionPointer.z > 1.0:
			emotionPointer.z = 1.0
		lblProp.text = str(emotionPointer.z)
		updateEmotionPointer()
	
	#material.set_shader_param(\"emotionPointer\", centeredEP)
	#material.set_shader_param(\"proportion\", emotionColorProportion)
	#background.material.set_shader_param(\"emotionPointer\", centeredEP)
	#background.material.set_shader_param(\"proportion\", emotionColorProportion)
	pass

func updateEmotionPointer():
	var emotionSize = get_rect().size
	
	# Just for the texture
	emotionSize.x *= 0.6
	emotionSize.y *= 0.8
	
	centeredEP.x = 0.5 + emotionPointer.x * 0.5
	centeredEP.y = 0.5 + emotionPointer.y * 0.5
	
	circle.position = emotionSize * centeredEP - emotionSize / 2.0
	emit_emotion_change()
	pass

func _on_btnExcited_pressed():
	emotionPointer.x = 0.406212
	emotionPointer.y = -0.913779
	updateEmotionPointer()
	pass


func _on_btnDelighted_pressed():
	emotionPointer.x = 0.828616
	emotionPointer.y = -0.559818
	updateEmotionPointer()
	pass


func _on_btnHappy_pressed():
	emotionPointer.x = 0.968924
	emotionPointer.y = -0.247357
	updateEmotionPointer()
	pass


func _on_btnContent_pressed():
	emotionPointer.x = 0.966499
	emotionPointer.y = 0.256671
	updateEmotionPointer()
	pass


func _on_btnCalm_pressed():
	emotionPointer.x = 0.681124
	emotionPointer.y = 0.732169
	updateEmotionPointer()
	pass


func _on_btnSleepy_pressed():
	emotionPointer.x = 0.388506
	emotionPointer.y = 0.921446
	updateEmotionPointer()
	pass


func _on_btnBored_pressed():
	emotionPointer.x = -0.409406
	emotionPointer.y = 0.912353
	updateEmotionPointer()
	pass


func _on_btnDepressed_pressed():
	emotionPointer.x = -0.685301
	emotionPointer.y = 0.72826
	updateEmotionPointer()
	pass


func _on_btnSad_pressed():
	emotionPointer.x = -0.9601
	emotionPointer.y = 0.279658
	updateEmotionPointer()
	pass


func _on_btnDistressed_pressed():
	emotionPointer.x = -0.945209
	emotionPointer.y = -0.326466
	updateEmotionPointer()
	pass


func _on_btnAngry_pressed():
	emotionPointer.x = -0.780946
	emotionPointer.y = -0.624599
	updateEmotionPointer()
	pass


func _on_btnTense_pressed():
	emotionPointer.x = -0.392995
	emotionPointer.y = -0.919541
	updateEmotionPointer()
	pass

func emit_emotion_change():
	emit_signal(\"_on_emotion_pointer_change\", emotionPointer)
	pass
"

[sub_resource type="GDScript" id=8]
script/source = "extends Label

const TIMER_LIMIT = 1.0
var timer = 0.0

func _process(delta):
	timer += delta
	if timer > TIMER_LIMIT:
		timer = 0.0
		text = str(Engine.get_frames_per_second())
"

[sub_resource type="ConvexPolygonShape2D" id=9]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=10]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=11]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=12]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=13]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=14]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=15]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=16]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=17]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=18]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=19]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=20]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=21]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=22]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="TileSet" id=23]
0/name = "Season_collection.png 0"
0/texture = ExtResource( 1 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 64, 112, 128, 48 )
0/tile_mode = 1
0/autotile/bitmask_mode = 0
0/autotile/bitmask_flags = [ Vector2( 0, 0 ), 256, Vector2( 0, 1 ), 260, Vector2( 0, 2 ), 4, Vector2( 1, 0 ), 320, Vector2( 1, 1 ), 325, Vector2( 1, 2 ), 5, Vector2( 2, 0 ), 324, Vector2( 2, 2 ), 261, Vector2( 5, 0 ), 321, Vector2( 5, 2 ), 69, Vector2( 7, 0 ), 64, Vector2( 7, 1 ), 65, Vector2( 7, 2 ), 1 ]
0/autotile/icon_coordinate = Vector2( 0, 0 )
0/autotile/tile_size = Vector2( 16, 16 )
0/autotile/spacing = 0
0/autotile/occluder_map = [  ]
0/autotile/navpoly_map = [  ]
0/autotile/priority_map = [  ]
0/autotile/z_index_map = [  ]
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 9 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 1, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 9 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 10 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 11 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 12 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 13 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 14 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 15 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 16 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 17 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 18 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 19 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 20 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 21 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 22 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0

[sub_resource type="GDScript" id=24]
script/source = "extends TileMap

func _ready():
	for i in range(0, 11):
		set_cell(i, 0, 0)
		set_cell(i, 1, 0)
		set_cell(i, 9, 0)
		set_cell(i, 10, 0)
	for i in range(0, 11):
		set_cell(0, i, 0)
		set_cell(1, i, 0)
		set_cell(9, i, 0)
		set_cell(10, i, 0)
	update_bitmask_region(Vector2(0,0), Vector2(10, 10))
	pass
"

[sub_resource type="GDScript" id=25]
script/source = "extends KinematicBody2D

var MOVEMENT_SPEED = 10000
var JUMP_STRENGTH = 200
var GRAVITY = 500

var acceleration = Vector2()

func _ready():
	pass
	
func _process(delta):
	acceleration.x = 0
	
	if is_on_ceiling():
		acceleration.y = 0
	
	if Input.is_action_pressed(\"player_left\"):
		acceleration.x -= MOVEMENT_SPEED * delta
		
	if Input.is_action_pressed(\"player_right\"):
		acceleration.x += MOVEMENT_SPEED * delta
		
	if is_on_floor():
		if Input.is_action_just_pressed(\"player_jump\"):
			acceleration.y = -JUMP_STRENGTH
	else:
		acceleration.y += GRAVITY * delta
		
	move_and_slide(acceleration, Vector2(0, -1))
	pass
"

[sub_resource type="RectangleShape2D" id=26]
extents = Vector2( 5, 5 )

[sub_resource type="Shader" id=27]
code = "shader_type canvas_item;

void fragment() {
	COLOR = vec4(0, 0, 1, 1);
}"

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 27 )

[sub_resource type="Shader" id=29]
code = "shader_type canvas_item;

uniform vec2 screenSize;
uniform sampler2D texHSL : hint_black;

void fragment() {
	vec2 pixelSize = vec2(1.0, 1.0) / screenSize;
	float countR = 0.0;
	float countG = 0.0;
	float countB = 0.0;
	float countY = 0.0;
	
	for(float x = 0.0; x < screenSize.x; x++) {
		for(float y = 0.0; y < screenSize.y; y++) {
			vec4 HSL = texture(texHSL, vec2(x * pixelSize.x, y * pixelSize.y));
			float hue = HSL.r * 360.0;
			if(hue <= 30.0 && hue > 330.0) {
				countR++;
			} else if(hue <= 150.0 && hue > 90.0) {
				countG++;
			} else if(hue <= 270.0 && hue > 210.0) {
				countB++;
			} else if(hue <= 90.0 && hue > 30.0) {
				countY++;
			}
		}
	}
	//vec4 result = vec4(countR, countG, countB, countY);
	vec4 result = vec4(countR, countG, countB, 1.0);
	result.xyz /= screenSize.x * screenSize.y;
	COLOR = result;
}"

[sub_resource type="ViewportTexture" id=30]
viewport_path = NodePath("HSLTarget")

[sub_resource type="ShaderMaterial" id=31]
resource_local_to_scene = true
shader = SubResource( 29 )
shader_param/screenSize = Vector2( 640, 480 )
shader_param/texHSL = SubResource( 30 )

[sub_resource type="Shader" id=32]
code = "shader_type canvas_item;

uniform vec2 screenSize;
uniform sampler2D texHSL : hint_black;

void fragment() {
	vec2 pixelSize = 1.0 / screenSize;
	float countM = 0.0;
	float countC = 0.0;
	float amountS = 0.0;
	float amountL = 0.0;
	
	for(float x = 0.0; x < screenSize.x; x++) {
		for(float y = 0.0; y < screenSize.y; y++) {
			vec4 HSL = texture(texHSL, vec2(x * pixelSize.x, y * pixelSize.y));
			float hue = HSL.r * 360.0;
			if(hue <= 330.0 && hue > 270.0) {
				countM++;
			} else if(hue <= 210.0 && hue > 150.0) {
				countC++;
			}
			amountS += HSL.g;
			amountL += HSL.b;
		}
	}
	//vec4 result = vec4(countM, countC, amountS, amountL);
	vec4 result = vec4(countM, amountS, amountL, 1.0);
	result.xyz /= screenSize.x * screenSize.y;
	COLOR = result;
}"

[sub_resource type="ViewportTexture" id=33]
viewport_path = NodePath("HSLTarget")

[sub_resource type="ShaderMaterial" id=34]
resource_local_to_scene = true
shader = SubResource( 32 )
shader_param/screenSize = Vector2( 640, 480 )
shader_param/texHSL = SubResource( 33 )

[sub_resource type="Shader" id=35]
code = "shader_type canvas_item;

float fMod(float value, float m) {
	float temp = value / m;
	return (temp - floor(temp)) * m; 
}

vec3 RGB2HSL(vec3 RGB) {
	vec3 HSL = vec3(0, 0, 0);
	
	float cMax = max(max(RGB.r, RGB.g), RGB.b);
	float cMin = min(min(RGB.r, RGB.g), RGB.b);
	float delta = cMax - cMin;
	
	HSL.b = (cMax +cMin) / 2.0;
	
	if(delta == 0.0) {
		HSL.r = 0.0;
		HSL.g = 0.0;
	} else {
		HSL.g = delta / (1.0 - abs(2.0 * HSL.b - 1.0));
		if(cMax == RGB.r) {
			HSL.r = 60.0 * mod((RGB.g - RGB.b) / delta, 6.0);
		} else if(cMax == RGB.g) {
			HSL.r = 60.0 * ((RGB.b - RGB.r) / delta + 2.0);
		} else if(cMax == RGB.b) {
			HSL.r = 60.0 * ((RGB.r - RGB.g) / delta + 4.0);
		}
		HSL.r = fMod(HSL.r, 360.0);
		HSL.r /= 360.0;
	}
	
	return HSL;
}

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	COLOR = vec4(RGB2HSL(color.rgb), color.a);
}"

[sub_resource type="ShaderMaterial" id=36]
shader = SubResource( 35 )

[sub_resource type="ViewportTexture" id=37]
viewport_path = NodePath("DefaultTarget")

[sub_resource type="ViewportTexture" id=38]
viewport_path = NodePath("HSLTarget")

[sub_resource type="ViewportTexture" id=39]
viewport_path = NodePath("HistoryTarget")

[node name="Node2D" type="Node2D"]

[node name="PostProcessedScreenSprite" type="Sprite" parent="."]
material = SubResource( 4 )
texture = SubResource( 5 )
centered = false
script = SubResource( 6 )

[node name="Panel" type="Panel" parent="."]
margin_left = 423.122
margin_right = 639.122
margin_bottom = 480.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="emotionColors" type="Sprite" parent="Panel"]
position = Vector2( 109.669, 144.249 )
scale = Vector2( 0.264802, 0.264802 )
texture = ExtResource( 6 )
script = SubResource( 7 )

[node name="circle" type="Sprite" parent="Panel/emotionColors"]
scale = Vector2( 0.0201627, 0.0201627 )
texture = ExtResource( 4 )

[node name="btnExcited" type="Button" parent="Panel"]
margin_left = 26.706
margin_top = 235.809
margin_right = 99.706
margin_bottom = 259.809
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Excited"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnDelighted" type="Button" parent="Panel"]
margin_left = 110.0
margin_top = 236.0
margin_right = 192.0
margin_bottom = 260.0
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Delighted"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnHappy" type="Button" parent="Panel"]
margin_left = 26.7059
margin_top = 267.8
margin_right = 99.7059
margin_bottom = 291.8
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Happy"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnContent" type="Button" parent="Panel"]
margin_left = 110.0
margin_top = 268.0
margin_right = 191.0
margin_bottom = 292.0
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Content"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnCalm" type="Button" parent="Panel"]
margin_left = 26.706
margin_top = 300.912
margin_right = 99.706
margin_bottom = 324.912
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Calm"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnSleepy" type="Button" parent="Panel"]
margin_left = 110.0
margin_top = 301.0
margin_right = 191.0
margin_bottom = 325.0
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Sleepy"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnBored" type="Button" parent="Panel"]
margin_left = 26.7059
margin_top = 332.902
margin_right = 99.7059
margin_bottom = 356.902
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Bored"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnDepressed" type="Button" parent="Panel"]
margin_left = 110.0
margin_top = 333.0
margin_right = 191.0
margin_bottom = 357.0
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Depressed"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnSad" type="Button" parent="Panel"]
margin_left = 26.7375
margin_top = 364.893
margin_right = 99.7375
margin_bottom = 388.893
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Sad"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnDistressed" type="Button" parent="Panel"]
margin_left = 110.329
margin_top = 364.893
margin_right = 191.329
margin_bottom = 388.893
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Distressed"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnAngry" type="Button" parent="Panel"]
margin_left = 27.2671
margin_top = 396.883
margin_right = 100.267
margin_bottom = 420.883
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Angry"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="btnTense" type="Button" parent="Panel"]
margin_left = 110.329
margin_top = 396.883
margin_right = 184.329
margin_bottom = 420.883
rect_pivot_offset = Vector2( 36.5, 12 )
text = "Tense"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="lblTitleFPS" type="Label" parent="Panel"]
margin_left = 56.5649
margin_top = 26.8787
margin_right = 110.565
margin_bottom = 40.8787
text = "FPS: "
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="lblFPS" type="Label" parent="Panel"]
margin_left = 92.6274
margin_top = 26.8787
margin_right = 146.627
margin_bottom = 40.8787
text = "0"
align = 1
valign = 1
script = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="lblProportion" type="Label" parent="Panel"]
margin_left = 86.6124
margin_top = 214.429
margin_right = 126.612
margin_bottom = 228.429
text = "0"
align = 1

[node name="DefaultTarget" type="Viewport" parent="."]
size = Vector2( 640, 480 )
usage = 0
render_target_v_flip = true
render_target_update_mode = 3

[node name="Background" type="Sprite" parent="DefaultTarget"]
position = Vector2( 320, 240 )
scale = Vector2( 2.21034, 2.21034 )
texture = ExtResource( 1 )
region_enabled = true
region_rect = Rect2( 32, 464, 288, 208 )

[node name="TileMap" type="TileMap" parent="DefaultTarget"]
tile_set = SubResource( 23 )
cell_size = Vector2( 16, 16 )
format = 1
script = SubResource( 24 )

[node name="Player" type="KinematicBody2D" parent="DefaultTarget"]
position = Vector2( 50, 100 )
script = SubResource( 25 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="DefaultTarget/Player"]
shape = SubResource( 26 )

[node name="Sprite" type="Sprite" parent="DefaultTarget/Player"]
position = Vector2( 0, -3 )
texture = ExtResource( 2 )
vframes = 8
hframes = 8

[node name="pixel" type="Sprite" parent="DefaultTarget"]
visible = false
material = SubResource( 28 )
position = Vector2( 200, 400 )
scale = Vector2( 200, 400 )
texture = ExtResource( 3 )

[node name="HistoryTarget" type="Viewport" parent="."]
size = Vector2( 3, 2 )
usage = 0
render_target_v_flip = true
render_target_update_mode = 3

[node name="HRBGY" type="Sprite" parent="HistoryTarget"]
material = SubResource( 31 )
position = Vector2( 1, 1 )
texture = ExtResource( 3 )

[node name="HMC_SLM" type="Sprite" parent="HistoryTarget"]
material = SubResource( 34 )
position = Vector2( 2, 1 )
texture = ExtResource( 3 )

[node name="HSLTarget" type="Viewport" parent="."]
size = Vector2( 640, 480 )
usage = 0
render_target_v_flip = true
render_target_update_mode = 3

[node name="DefaultScreen" type="Sprite" parent="HSLTarget"]
material = SubResource( 36 )
texture = SubResource( 37 )
centered = false

[node name="DebugHSL" type="Sprite" parent="."]
visible = false
position = Vector2( 317.407, 242.675 )
texture = SubResource( 38 )

[node name="DebugHistory" type="Sprite" parent="."]
visible = false
position = Vector2( 317.407, 242.675 )
scale = Vector2( 200, 200 )
texture = SubResource( 39 )
[connection signal="pressed" from="Panel/btnExcited" to="Panel/emotionColors" method="_on_btnExcited_pressed"]
[connection signal="pressed" from="Panel/btnDelighted" to="Panel/emotionColors" method="_on_btnDelighted_pressed"]
[connection signal="pressed" from="Panel/btnHappy" to="Panel/emotionColors" method="_on_btnHappy_pressed"]
[connection signal="pressed" from="Panel/btnContent" to="Panel/emotionColors" method="_on_btnContent_pressed"]
[connection signal="pressed" from="Panel/btnCalm" to="Panel/emotionColors" method="_on_btnCalm_pressed"]
[connection signal="pressed" from="Panel/btnSleepy" to="Panel/emotionColors" method="_on_btnSleepy_pressed"]
[connection signal="pressed" from="Panel/btnBored" to="Panel/emotionColors" method="_on_btnBored_pressed"]
[connection signal="pressed" from="Panel/btnDepressed" to="Panel/emotionColors" method="_on_btnDepressed_pressed"]
[connection signal="pressed" from="Panel/btnSad" to="Panel/emotionColors" method="_on_btnSad_pressed"]
[connection signal="pressed" from="Panel/btnDistressed" to="Panel/emotionColors" method="_on_btnDistressed_pressed"]
[connection signal="pressed" from="Panel/btnAngry" to="Panel/emotionColors" method="_on_btnAngry_pressed"]
[connection signal="pressed" from="Panel/btnTense" to="Panel/emotionColors" method="_on_btnTense_pressed"]
